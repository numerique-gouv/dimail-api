import re

import dns.name
import dns.resolver

# Those functions are usefull for parsing DKIM or SPF records from TXT in
# DNS entries

def get_txt_from_dns_record(text: str) -> (str, str):
    if infos := re.match(r"(\S*)\s+IN\s+TXT\s+\((.*)\)", text, flags=re.DOTALL):
        # This is probably a DNS record as generated by opendkim, get the TXT context
        dns = infos.group(1)
        text = infos.group(2)
        return (dns, text)
    return (None, text)

def join_text_parts(text: str) -> str:
    if text.startswith('"'):
        text = re.sub(r"\"\s+\"", "", text)
        text = re.sub(r"^\"(.*)\"$", "\\1", text)
    return text

def get_dkim_dict(text: str) -> dict:
    items = re.findall(r"(\S+)=(\S+)(;\s*|$)", text)
    res = {}
    for item in items:
        res[item[0]] = item[1]
    return res
    items = text.split(";")
    for item in items:
        print(f"Je regarde l'item {item}")
        (key, val) = item.split("=", 1)
        print(f"key = '{key}' et val = '{val}'")
        setattr(self, key, val)


def __get_colon_modifier(mech: str, modifier: str) -> str:
    if modifier == "":
        raise Exception(f"Weird '{mech}' in your SPF record (excepted :something)")
    if infos := re.match(r":(\S+)", modifier):
        return infos.group(1)
    else:
        raise Exception(
            f"Weird '{mech}' mechanism in your SPF record (what is '{modifier}' here?)"
        )

def get_spf_records(text: str) -> list[dict]:
    text = re.sub("^v=spf1\s+", "", text)
    items = re.findall(r"(\+|-|~|\?|)(\w+)(\S*)?", text)
    res = []
    for item in items:
        qualifier = item[0]
        mechanism = item[1]
        modifier  = item[2]
        if qualifier == "":
            qualifier = "+"
        match mechanism:
            case "all":
                if not modifier == "":
                    raise Exception(
                        f"Weird 'all' mechanism in your SPF record (what is '{modifier}' here?)"
                    )
                pass
            case "mx":
                # Modifier is allowed, but RFC 7208 is silent on what to do with it
                pass
            case "include" | "ip4" | "ip6" | "a" | "ptr" | "exists":
                modifier = __get_colon_modifier(mechanism, modifier)
            case _:
                raise Exception(f"Invalid mechanism '{mechanism}' in your SPF record")
        res.append({"qualifier": qualifier, "mechanism": mechanism, "modifier": modifier})
        if mechanism == "all":
            # Ignore anything after 'all'
            break
    
    return res

#Â Those functions are used to do some basci DNS server high level manipulation    

def get_ip_address(domain: str) -> str:
    answer = dns.resolver.resolve(domain)
    for item in answer:
        return str(item.address)

def make_auth_resolver(domain: str, insist: bool = False) -> dns.resolver.Resolver:
    print(f"Je cherche les resolvers pour {domain}")
    name = dns.name.from_text(domain)
    try:
        answer = dns.resolver.resolve(name, rdtype = "NS")
    except dns.resolver.NoAnswer:
        (_, up) = domain.split(".", 1)
        print(f"Je ne trouve pas les NS pour {domain}, je remonte d'un cran vers {up}")
        return make_auth_resolver(up, insist)
    except dns.resolver.NXDOMAIN:
        if insist:
            (_, up) = domain.split(".", 1)
            print(f"Je ne trouve pas les NS pour {domain}, je remonte d'un cran vers {up}")
            return make_auth_resolver(up, insist)
        raise
    except Exception:
        raise
    addresses = []
    for item in answer:
        ip_addr = get_ip_address(str(item.target))
        addresses.append(ip_addr)
    resolver = dns.resolver.Resolver()
    resolver.nameservers = addresses
    return resolver


